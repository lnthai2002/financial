- content_for :specific_view_js do
  %script{:src=>'financial/accounting.min.js', :type=>'text/javascript', :charset=>'utf-8'}

.container#plan-form
  .row
    .col-xs-12.col-md-6
      .panel.panel-danger#frm_mortgage
        .panel-heading
          Mortgage
        .panel-body
          .form-horizontal
            .form-group
              .col-xs-3
                %label.control-label Purchased price
              .col-xs-3
                =number_field_tag :m_purchased_price, nil, step:'any', class:'form-control'
            .form-group
              .col-xs-3
                %label.control-label Down payment
              .col-xs-3
                =number_field_tag :m_down_payment, nil, step:'any', class:'form-control'
            .form-group
              .col-xs-3
                %label.control-label Annual Percentage Rate
              .col-xs-3
                =number_field_tag :m_apr, nil, step:'any', class:'form-control'
            .form-group
              .col-xs-3
                %label.control-label Amortization period (years)
              .col-xs-3
                =number_field_tag :m_amo_period, nil, class:'form-control'
            .form-group
              .col-xs-3
                %label.control-label Payment frequency
              .col-xs-3
                =select_tag :m_p_frequency, options_for_select([['Monthly', 'monthly'], ['Bi-Weekly', 'bi-weekly'], ['weekly', 'weekly']]), class:'form-control'
      .panel.panel-danger#frm_mortgage_adj{style: 'display:none'}
        .panel-heading
          Mortgage Adjustment
        .panel-body
          .form-horizontal
            .form-group
              .col-xs-6.col-md-3
                =select_tag :m_adj_opts, options_for_select([['Increase routine payment', 'routine_xtra'], ['Lump sum payment', 'one_shot']]), class:'form-control'
              .col-xs-6.col-md-3
                =text_field_tag :m_adj_amount, nil, placeholder:'Amount', class:'form-control'
            .form-group.adj_period{style: 'display:none'}
              .col-xs-1
                %label.control-label at
              .col-xs-2
                =text_field_tag :m_adj_period, nil, class:'form-control'
            .form-group
              .col-xs-6
                %button.btn.btn-primary#adjust Adjust
    .col-xs-12.col-md-6
      .panel.panel-success#frm_investment
        .panel-heading
          Investment
        .panel-body
          .form-horizontal
            .form-group
              .col-xs-6.col-md-3
                %label.control-label Principal
              .col-xs-6.col-md-3
                =number_field_tag :i_principal, nil, step:'any', class:'form-control'
            .form-group
              .col-xs-6.col-md-3
                %label.control-label Anual Rate
              .col-xs-6.col-md-3
                =number_field_tag :i_rate, nil, step:'any', placeholder:'rate of return', class:'form-control'
            .form-group
              .col-xs-6.col-md-3
                =select_tag :i_saving_frequency, options_for_select([['Yearly saving', 'y'], ['Monthly saving', 'm'], ['Bi-Weekly saving', 'b'], ['Weekly saving', 'w']]), class:'form-control'
              .col-xs-6.col-md-3
                =number_field_tag :i_frequent_amt, nil, step:'any', class:'form-control'
            .form-group
              .col-xs-6.col-md-3
                %label.control-label Length (Years)
              .col-xs-6.col-md-3
                =number_field_tag :i_length, nil, step:1, placeholder:'until mature', class:'form-control'
      .panel.panel-success#frm_investment_adj{style: 'display:none'}
        .panel-heading
          Investment Adjustment
        .panel-body
          .form-horizontal
            .form-group
              .col-xs-6.col-md-3
                %label.control-label Monthly saving
              .col-xs-6.col-md-3
                =number_field_tag :i_adj_monthly_dep, nil, step:'any', placeholder:'alternative monthly saving', class:'form-control'
            .form-group
              .col-xs-6.col-md-3
                %label.control-label Alt Compound Rate
              .col-xs-6.col-md-3
                =number_field_tag :i_adj_rate, nil, step:'any', placeholder:"alternative rate", class:'form-control'
            .form-group
              .col-xs-6.col-md-3
                %label.control-label Alt length
              .col-xs-6.col-md-3
                =number_field_tag :i_adj_month, nil, step:1, placeholder:'months until mature', class:'form-control'
            .form-group
              .col-xs-6.col-md-3
                %button.btn.btn-primary Re-calculate
  .row
    .col-xs-12
      %button.btn.btn-primary#calculate Calculate
      %button.btn.btn-primary#detail Amortization table
      %button.btn.btn-primary#restart Restart plan

  %hr

  %table.table.table-striped.table-bordered.table-condensed#m_result
    %thead
      %tr
        %th Loan
        %th APR
        %th Duration
        %th Mandatory routine payment
        %th Gross routine payment
        %th Total interest
    %tbody

  %table.table.table-striped.table-bordered.table-condensed#i_result
    %thead
      %tr
        %th Principal
        %th AIR
        %th Duration
        %th#i_depot_title Deposit
        %th Compound value
        %th Simple value
    %tbody

  %table.table.table-striped.table-bordered.table-condensed#amortization{style:'display:none'}
    %thead
      %tr
        %th Period
        %th Interest
        %th Cap deduction
        %th Balance
    %tbody

:javascript
  var financial_planning_app = (function(){
    var mortgage;
    var investment;

    //apr stands for Annual Percentage Rate
    function Mortgage(loan, apr, term, frequency) {
      this._loan = loan;
      this._apr = apr;
      this._term = term;
      this._mandatory_payment = null;
      this._payment_increased = 0;
      this._anual_periods = 0;
      this._total_interest = 0;
      switch(frequency) {
        case 'monthly':
          this._anual_periods = 12;
          break;
        case 'bi-weekly':
          this._anual_periods =  26;
          break;
        case 'weekly':
          this._anual_periods =  52;
          break;
        default:
          throw "Unknown period";
      };
      this._amo = [{loan: this._loan, apr: this._apr, term: this._term, frequency: frequency, payment_increased: this._payment_increased}]; //first element is 0

      var current_period = 1;
      var loan_duration = this._term * this._anual_periods;
      var partial_interest_rate = this._apr / this._anual_periods;
      var prev_balance = this._loan;

      while (current_period <= loan_duration) {
        var current_interest = prev_balance * partial_interest_rate;
        var capital_deduction = this.mandatory_payment() - current_interest;
        var current_balance = prev_balance - capital_deduction;
        var payment = {
          period: current_period,
          interest: current_interest,
          cap_deduction: capital_deduction,
          balance: current_balance
        };
        this._amo.push(payment);

        this._total_interest = this._total_interest + current_interest;
        if (current_balance <= 0) {
          break;
        }

        current_period = current_period + 1;
        prev_balance = current_balance;
      }
    };

    Mortgage.prototype.mandatory_payment = function() {
      if(this._mandatory_payment == null) {
        var partial_interest_rate = this._apr/this._anual_periods;
        this._mandatory_payment = (this._loan * partial_interest_rate / (1- Math.pow(1+partial_interest_rate, this._term*(-1*this._anual_periods)) ));
      }
      return this._mandatory_payment;
    };

    Mortgage.prototype.add_xtra_payment = function(period, amount) {
      if (this._amo.length > 0) {
        if (typeof this._amo[period] !== 'undefined' && this._amo[period] !== null) {
          this._amo[period].extra_payment = amount;
        }
        else {
          throw 'The given period is not part of the mortgage';
        }
      }
      else {
        throw 'Mortgage has not been calculated yet';
      }
    };

    Mortgage.prototype.increase_payment = function(amount) {
      this._payment_increased = amount;
      this._amo[0].payment_increased = amount;
    };

    Mortgage.prototype.rebuild = function() {
      var current_period = 1;
      var loan_duration = this._term * this._anual_periods;
      var partial_interest_rate = this._apr / this._anual_periods;
      var prev_balance = this._loan;
      this._total_interest = 0;

      while (current_period <= loan_duration) {
        var current_interest = prev_balance * partial_interest_rate;
        var xtra_payment = 0;
        if (typeof this._amo[current_period].extra_payment !== 'undefined' && this._amo[current_period].extra_payment !== null) {
          xtra_payment = this._amo[current_period].extra_payment;
        }
        var capital_deduction = this.mandatory_payment() + this._payment_increased + xtra_payment - current_interest;
        var current_balance = prev_balance - capital_deduction;
        var payment = {
          period: current_period,
          interest: current_interest,
          cap_deduction: capital_deduction,
          extra_payment: xtra_payment,
          balance: current_balance
        };
        this._amo[current_period] = payment;

        this._total_interest = this._total_interest + current_interest;
        if (current_balance <= 0) {
          this._amo.splice(current_period + 1); //get rid of all payments after this
          break;
        }

        current_period = current_period + 1;
        prev_balance = current_balance;
      }
    };

    Mortgage.prototype.to_array = function() {
      return this._amo;
    };

    Mortgage.prototype.total_interest = function() {
      return this._total_interest;
    };

    Mortgage.prototype.length = function() {
      var l = this._amo.length - 1;
      switch(this._amo[0].frequency) {
        case 'monthly':
          return accounting.formatNumber(l / 12) + ' year, ' + l % 12 + ' months';
        case 'bi-weekly':
          return accounting.formatNumber(l * 2 / 52) + ' year, ' + accounting.formatNumber(((l * 2) % 52) / 4) + ' months ' + accounting.formatNumber(((l * 2) % 52) % 4) + ' weeks';
        case 'weekly':
          return accounting.formatNumber(l / 52) + ' year, ' + accounting.formatNumber((l % 52) / 4) + ' months ' + accounting.formatNumber((l % 52) % 4) + ' weeks';
        default:
          throw "Unknown period";
      };
    };

    //AIR stands for Anual Interest Rate
    function Investment(principal, air, frequency, frequent_amt, duration) {
      this._principal = principal;
      this._ai = air / 100;
      this._length = duration;
      this._ac = 0; //Anual Contribution
      this._frequency = frequency;
      this._frequent_amt = frequent_amt;
      switch (frequency) {
        case 'y':
          this._ac = frequent_amt;
          break;
        case 'm':
          this._ac = frequent_amt * 12;
          break;
        case 'b':
          this._ac = frequent_amt * 28;
          break;
        case 'w':
          this._ac = frequent_amt * 56;
          break;
      };
    };

    Investment.prototype.compounded_value_at_mature = function() {
      var future_value_of_principal = this._principal * Math.pow(1+this._ai, this._length);
      var future_value_of_monthly_dep = this._ac * (Math.pow(1+this._ai, this._length) -1)/this._ai;
      
      return (future_value_of_monthly_dep + future_value_of_principal);
    };

    Investment.prototype.simple_value_at_mature = function() {
      var future_value_of_principal = this._principal;
      var future_value_of_monthly_dep = this._ac * this._length;

      return (future_value_of_monthly_dep + future_value_of_principal);
    };

    $( document ).ready(function() {
      $('#calculate').on('click', function() {
        if(mortgage == null) {
          var loan = Number($('#m_purchased_price').val()) - Number($('#m_down_payment').val());
          mortgage = new Mortgage(loan, Number($('#m_apr').val()) / 100, Number($('#m_amo_period').val()), $('#m_p_frequency option:selected').val());
          $('#frm_mortgage').hide();
          $('#frm_mortgage_adj').show();
          $('#i_principal').prop('disabled', true);
        }
        else {
          mortgage.rebuild();
        }
        investment = new Investment(
          Number($('#i_principal').val()),
          Number($('#i_rate').val()),
          $('#i_saving_frequency').val(),
          Number($('#i_frequent_amt').val()),
          Number($('#i_length').val())
        );
        show_result();
      });

      $('#m_adj_opts').on('change', function() {
        switch($('#m_adj_opts option:selected').val()){
          case 'routine_xtra':
            $('.adj_period').hide();
            break;
          case 'one_shot':
            $('.adj_period').show();
            break;
        }
      });

      $('#detail').on('click', function() {
        var amo = mortgage.to_array();
        $('#amortization > tbody').empty();
        for(i = 1; i < amo.length; i++) {
          $('#amortization > tbody:last-child').append('<tr><td>'+amo[i].period+'</td><td>'+accounting.formatMoney(amo[i].interest)+'</td><td>'+accounting.formatMoney(amo[i].cap_deduction)+'</td><td>'+accounting.formatMoney(amo[i].balance)+'</td></tr>');
        }
        $('#amortization').toggle();
      });

      $('#adjust').on('click', function() {
        switch($('#m_adj_opts option:selected').val()) {
          case 'routine_xtra':
            mortgage.increase_payment(Number($('#m_adj_amount').val()));
            break;
          case 'one_shot':
            mortgage.add_xtra_payment(Number($('#m_adj_period').val()), Number($('#m_adj_amount').val()));
            break;
        }
        $('#m_adj_period').val('');
        $('#m_adj_amount').val('');
      });

      $('#restart').on('click', function() {
        mortgage = null;
        $('#frm_mortgage_adj').hide();
        $('#frm_mortgage').show();
        $('#i_principal').prop('disabled', false);
      });

      function show_result() {
        var amo = mortgage.to_array();
        $('#m_result > tbody').empty();
        $('#m_result > tbody:last-child').append('<tr><td>'+accounting.formatMoney(amo[0].loan)+'</td><td>'+accounting.formatNumber(amo[0].apr * 100, 2)+'</td><td>'+mortgage.length()+'</td><td>'+accounting.formatMoney(mortgage.mandatory_payment())+'</td><td>'+accounting.formatMoney(mortgage.mandatory_payment() + amo[0].payment_increased)+'</td><td>'+accounting.formatMoney(mortgage.total_interest())+'</td></tr>');

        $('#i_result > tbody').empty();
        $('#i_result #i_depot_title').html(investment._frequency);
        $('#i_result > tbody:last-child').append('<tr><td>'+accounting.formatMoney(investment._principal)+'</td><td>'+accounting.formatNumber(investment._ai * 100, 2)+'</td><td>'+investment._length+'</td><td>'+accounting.formatMoney(investment._frequent_amt)+'</td><td>'+accounting.formatMoney(investment.compounded_value_at_mature())+'</td><td>'+accounting.formatMoney(investment.simple_value_at_mature())+'</td></tr>');
      };
    });
  }());
